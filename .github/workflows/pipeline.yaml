name: Release

on:
  workflow_dispatch:
  pull_request:
  push:
   branches: [main]

env:
  GO_VERSION: 1.19

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
    - 
      name: Checkout Code
      uses: actions/checkout@v3
    - 
      name: Configure Go Environment    
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}
        
  
  Trivy:
    runs-on: ubuntu-latest
    name: Security Scan (Trivy)
    steps:
    - 
      name: Checkout Code
      uses: actions/checkout@v3
    - 
      name: Build Container
      run: |
        docker build -t trivy:scan .
    - 
      name: Trivy Scan (Container) - Critial & High
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'trivy:scan'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
        format: 'sarif'
        output: 'trivy-results-crit.sarif'
    - 
      name: Trivy Scan (Container) - Medium, Low & Unknown
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'trivy:scan'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'MEDIUM,LOW,UNKNOWN'
        format: 'sarif'
        output: 'trivy-results-mid.sarif'
    - 
      name: Upload Trivy Results (GitHub Security) - Critial & High
      uses: github/codeql-action/upload-sarif@v2
      if: always() 
      with:
        category: "Critial & High"
        sarif_file: 'trivy-results-crit.sarif'
    - 
      name: Upload Trivy Results (GitHub Security) - Medium, Low & Unknown
      uses: github/codeql-action/upload-sarif@v2
      if: always() 
      with:
        category: "Medium, Low & Unknown"
        sarif_file: 'trivy-results-mid.sarif'
      
  BuildAndRelease:
    if: (github.ref == 'refs/heads/main') && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs: [Build, Trivy]
    steps:     
      -
        name: Checkout Code
        uses: actions/checkout@v3
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - 
        name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/prosperitybot/worker
      -
        name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: "develop,main"
      - 
        name: Build & Push Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ghcr.io/prosperitybot/worker:${{ steps.tag_version.outputs.new_tag }}
          labels: ${{ steps.meta.outputs.labels }}
      - 
        name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
